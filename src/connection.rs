//! There is no "Connection" struct!
//! Instead "connect" returns a ConnectionSender, a ResultReciever, InfoReciever, and a NoticeReciever.

use std::sync::mpsc;
use std::sync::mpsc::{Receiver, Sender};

use crate::info;
use crate::query;

/// Send queries or requests for info to the connection.
/// The connection will send the results back in the same order of the requests.
/// The methods of this struct do not block.
/// Dropping this will cause the postgres connection to close.
pub struct RequestSender {
    send: Sender<PostgresRequest>,
}

/// The different types of requests that can be sent to postgres through a ConnectionSender.
enum PostgresRequest {}

/// Recieves the results of queries sent to the connection.
/// The methods of this struct will block.
pub struct ResultReciever {
    recv: Receiver<Result<query::QueryResult, query::QueryError>>,
}

/// Recieves the results of requests for info sent to the connection.
/// For example for checking the transaction status.
/// The methods of this struct will block.
pub struct InfoReciever {
    recv: Receiver<info::Info>,
}

/// Recieves notices and warnings sent by postgres.
/// Read: 32.13. Notice Processing
/// Docs: "Notice and warning messages generated by the server are not returned by the query execution functions,
/// since they do not imply failure of the query. Instead they are passed to a notice handling function,
/// and execution continues normally after the handler returns."
/// The methods of this struct will block.
pub struct NoticeReciever {
    recv: Receiver<String>, // Notices are just text messages tbh.
}

/// Opens a postgres connecting using a connection string.
/// Connection strings are documented in 32.1.1. Connection Strings
pub fn connect(
    connection_string: String,
) -> (RequestSender, ResultReciever, InfoReciever, NoticeReciever) {
    let (request_send, request_recv) = mpsc::channel::<PostgresRequest>();
    let (result_send, result_recv) =
        mpsc::channel::<Result<query::QueryResult, query::QueryError>>();
    let (info_send, info_recv) = mpsc::channel::<info::Info>();
    let (notice_send, notice_recv) = mpsc::channel::<String>();

    std::thread::spawn(move || {
        connection_event_loop(
            connection_string,
            request_recv,
            result_send,
            info_send,
            notice_send,
        );
    });

    (
        RequestSender { send: request_send },
        ResultReciever { recv: result_recv },
        InfoReciever { recv: info_recv },
        NoticeReciever { recv: notice_recv },
    )
}

fn connection_event_loop(
    connection_string: String,
    request_recv: Receiver<PostgresRequest>,
    result_send: Sender<Result<query::QueryResult, query::QueryError>>,
    info_send: Sender<info::Info>,
    notice_send: Sender<String>,
) {
    todo!()
}
